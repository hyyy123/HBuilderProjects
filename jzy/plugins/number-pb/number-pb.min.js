(function ($) {
    var NumberProgressBar = function (element, options) {
        //alert(0)
        var settings = $.extend({
            duration: 10000,
            count: 0,
            allCount: 0,
            shownQuery: '.number-pb-shown',
            numQuery: '.number-pb-num'
        }, options || {});

        this.duration = settings.duration;
        this.last_percentage = -1;
        this.allCount = settings.allCount;
        this.count = (settings.count >= 0 && settings.count <= settings.allCount) ? settings.count : 0;
        this.$element = $(element);
        this.width = this.$element.width();
        this.$shownBar = this.$element.find(settings.shownQuery);
        this.$num = this.$element.find(settings.numQuery);

        this.reach(this.count, this.allCount);
    }

    NumberProgressBar.prototype.reach = function (count, allCount) {
        if (this.last_percentage < 0) {
            this.last_percentage = 0;
        } else {
            this.last_percentage = this.count;
        }

        if (count < 0) {
            this.count = 0;
        } else if (count > allCount) {
            this.count = allCount;
        } else {
            this.count = count;
        }
        //console.log('reach: ', this.last_percentage, this.count, this.calDuration());
        this.moveShown();
        this.moveNum();
    }

    NumberProgressBar.prototype.calDuration = function () {
        return this.duration * Math.abs(this.count - this.last_percentage) / this.allCount;
    }

    NumberProgressBar.prototype.moveShown = function () {
        //console.log('moveShown: ', this.count);
        this.$shownBar.velocity({
            width: (this.count / this.allCount) * 100 + '%',
        }, {
            duration: this.calDuration()
        })
    }

    NumberProgressBar.prototype.moveNum = function () {
        //console.log('moveNum: ', this.count);
        var self = this;
        var left = this.width * this.count / this.allCount;
        var numWidth = this.$num.width();
        if (numWidth + left > this.width) {
            var count = (this.width - numWidth) / this.width * this.allCount;
        } else {
            var count = this.count;
        }

        this.$num.velocity({
            left: (count / this.allCount) * 100 + '%'
        }, {
            duration: this.calDuration()
        })

        // number
        $({ num: parseInt(this.$num.text()) }).animate({
            num: this.count
        }, {
            queue: true,
            duration: self.calDuration(),
            step: function () {
                self.$num.text(Math.ceil(this.num) + '/' + self.allCount);
            },
            complete: function () {
                self.$num.text(self.count + '/' + self.allCount);
            }
        })
    }

    $.fn.NumberProgressBar = function (options) {
        new NumberProgressBar(this, options)
        return this.each(function () {
            var element = $(this);
            if (element.data('number-pb')) return;
            element.data('number-pb', new NumberProgressBar(this, options));
        })
    }

    $.fn.reach = function (count, allCount) {
        return this.each(function () {
            var element = $(this);
            var progressbar = element.data('number-pb');
            if (!progressbar) return;
            if (count < 0 || count > allCount || count == progressbar.count) return;
            progressbar.reach(count, allCount);
        })
    }

})(jQuery);